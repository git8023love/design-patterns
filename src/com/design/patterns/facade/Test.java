package com.design.patterns.facade;

public class Test {

	/**
	 * 外观模式: 为多个复杂的子系统提供一个一致的接口，使这些子系统更加容易被访问。
	 * 该模式对外有一个统一接口，外部应用程序不用关心内部子系统的具体的细节，这样会大大降低应用程序的复杂度，提高了程序的可维护性
	 * 
	 * 外观模式隐藏系统的复杂性，并向客户端提供了一个客户端可以访问系统的接口。这种类型的设计模式属于结构型模式，它向现有的系统添加一个接口，来隐藏系统的复杂性。
	 * 这种模式涉及到一个单一的类，该类提供了客户端请求的简化方法和对现有系统类方法的委托调用。
	 * 
	 * 软件设计也是这样，当一个系统的功能越来越强，子系统会越来越多，客户对系统的访问也变得越来越复杂。这时如果系统内部发生改变，客户端也要跟着改变，这违背了“开闭原则”，
	 * 也违背了“迪米特法则”，所以有必要为多个子系统提供一个统一的接口，从而降低系统的耦合度，这就是外观模式的目标。

	        外观模式适用场景
	    1、对分层结构系统构建时，使用外观模式定义子系统中每层的入口点可以简化子系统之间的依赖关系。
	    2、当一个复杂系统的子系统很多时，外观模式可以为系统设计一个简单的接口供外界访问。
	    3、当客户端与多个子系统之间存在很大的联系时，引入外观模式可将它们分离，从而提高子系统的独立性和可移植性。



		优缺点
		1、减少系统相互依赖。
		2、提高灵活性。
		3、提高了安全性。
		4、不能很好地限制客户使用子系统类。
		5、增加新的子系统可能需要修改外观类或客户端的源代码，违背了“开闭原则”。
		
		模式结构
		1、外观（Facade）角色：为多个子系统对外提供一个共同的接口。
		2、子系统（Sub System）角色：实现系统的部分功能，客户可以通过外观角色访问它。
		3、客户（Client）角色：通过一个外观角色访问各个子系统的功能。

	 */
    public static void main(String[] args) {
        FacadeDemo demo = new FacadeDemo();
        demo.startCpu();
        demo.startMemory();
        demo.startDisk();
    }
}